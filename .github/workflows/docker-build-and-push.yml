name: docker-build-and-push

on:
  push:
    paths-ignore:
      - "**.md"
  pull_request:
    branches:
      - master
    paths-ignore:
      - "**.md"

jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=pabra/awstats
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=tags::${TAGS}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: docker images before
        run: docker image ls

      - name: Build awstats for testing
        uses: docker/build-push-action@v2
        with:
          outputs: type=docker
          tags: pabra/awstats:test
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build awstats-test
        uses: docker/build-push-action@v2
        with:
          context: ./test
          file: ./test/Dockerfile
          outputs: type=docker
          tags: pabra/awstats-test:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: docker images after
        run: docker image ls

      - name: run tests
        run: ./run_tests.sh skip_build

      - name: echo running containers 1
        run: docker ps -a

      # - name: Login to DockerHub
      #   if: github.event_name != 'pull_request'
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      #
      # - name: Build and push
      #   if:  github.event_name != 'pull_request'
      #   id: docker_build
      #   uses: docker/build-push-action@v2
      #   with:
      #     platforms: linux/amd64,linux/arm64,linux/386
      #     push: true
      #     tags: ${{ steps.prep.outputs.tags }}
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache
